{"version":3,"sources":["payment-form-ui.js","payment-form-handler.js"],"names":["affiniForm","isValidCard","raw","number","replace","len","length","arr","bit","sum","parseInt","formatAmount","field","val","parseFloat","trim","isNaN","toFixed","$","fn","AffiniPayPaymentForm","validateExpiration","errorField","theDate","Date","monthExpiration","yearExpiration","isValidDate","toggleClass","html","isErrored","PaymentFormFocusHandler","e","preventDefault","PaymentFormKeyPressHandler","target","currentTarget","attr","setCardValidationRule","hasClass","PaymentFormBlurHandler","checkMaxLength","key","el","removeClass","addClass","rule_type","data","rule","isValid","container","v","error_label","required","value","setCardTypeFromNumber","validation_tests","validForRule","textLabel","handleValidationError","PaymentFormChangeHandler","cardTypeFromNumber","patterns","RegExp","brand","$card_number","card_types","visa","test","mastercard","discover","amex","jcb","setCardBrand","t","card_brand","formatCardNumber","keyCode","formatted","raw_string","matches","match","format","x","str","regex","displayError","message","txt","id","inError","index","errors","indexOf","push","splice","$btnSubmit","prop","form","this","cvcLength","luhn","diners","numeric","alpha","any","alphanumeric","state","postal_code","email","month","year","cvv","on","find","each","validateAllFields","jQuery","removeNameAttributes","removeAttribute","exp_month","exp_year","addNameAttributes","name","updateFields","code","applyToField","context","msg","sel","lbl","css","ChargeIO","init","public_key","affinipay","ready","processErrorMessages","err","formWrapper","ap_error","err_message","messages","forEach","error","fadeOut","fadeIn","before","animate","scrollTop","offset","top","btnSubmit","amount","account","address1","address2","city","phone","recurring_interval","recurring_ends","extendChargeIO","charge_params","customer_name","customer_address","customer_address2","customer_city","customer_state","customer_postal","customer_email","customer_phone","formComplete","emailSent","method","replaceWith","onSubmit","paymentJson","payment_params","create_token","token","action","form_data","redirect_url","account_id","post","ajax_url","done","window","location","fail","resp","responseJSON","always","click"],"mappings":"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","file":"../affinipay.min.js","sourcesContent":["'use strict';\nvar affiniForm = {\n    isValidCard: function (raw) {\n        var number = raw.replace(/\\s/g, ''),\n            len = number ? number.length : 0,\n            arr = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9],\n            bit = 1,\n            sum = 0;\n\n        while (len--) {\n            sum += !(bit ^= 1) ? parseInt(number[len], 10) : arr[number[len]];\n        }\n\n        return  sum % 10 === 0 && sum > 0;\n    },\n    formatAmount: function(field){\n        var val = parseFloat(field.val().trim().replace('$',''));\n        if(isNaN(val)) return field.val('');\n        field.val(val.toFixed(2));\n    }\n};\n\n(function ( $ ) {\n\n\n    $.fn.AffiniPayPaymentForm = function() {\n        var form = this;\n\n        const card_types = {\n            visa: {\n                brand: 'visa',\n                patterns: /^4/,\n                format: /^(\\d{4})(\\d{4})?(\\d{4})?(\\d{4})?$/,\n                length: [13, 16],\n                cvcLength: [3],\n                luhn: !0\n            },\n            mastercard: {\n                brand: 'mastercard',\n                patterns: /^(51|52|53|54|55|22|23|24|25|26|27)/,\n                format: /^(\\d{4})(\\d{4})?(\\d{4})?(\\d{4})?$/,\n                length: [16],\n                cvcLength: [3],\n                luhn: !0\n            },\n            amex: {\n                brand: 'amex',\n                patterns: /^(34|37)/,\n                format: /^(\\d{4})(\\d{6})?(\\d{5,6})?$/,\n                length: [15],\n                cvcLength: [3, 4],\n                luhn: !0\n            },\n            diners: {\n                brand: 'diners',\n                patterns: /^(30|36|38|39)/,\n                format: /^(\\d{4})(\\d{4})?(\\d{4})?(\\d{4})?$/,\n                length: [14],\n                cvcLength: [3],\n                luhn: !0\n            },\n            discover: {\n                brand: 'discover',\n                patterns: /^(60|64|65)/g,\n                format: /^(\\d{4})(\\d{4})?(\\d{4})?(\\d{4})?$/,\n                length: [16],\n                cvcLength: [3],\n                luhn: !0\n            },\n            jcb: {\n                brand: 'jcb',\n                patterns: /^35/,\n                format: /^(\\d{4})(\\d{4})?(\\d{4})?(\\d{4})?$/,\n                length: [16],\n                cvcLength: [3],\n                luhn: !0\n            }\n        };\n        const validation_tests = {\n            numeric: /[0-9]/,\n            alpha: /[A-Z]/i,\n            any: /.+/,\n            alphanumeric: /^[a-z\\d\\-_\\s]+$/i,\n            state: /^[A-Z]{2}$/,\n            postal_code: /^[\\w\\d\\s-]{3,9}$/,\n            email: /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/,\n            month: /^\\d{2}$/,\n            year: /^\\d{4}$/,\n            cvv: /^\\d{3,4}$/\n        };\n        var card_brand = null;\n        var $card_number = $('#number');\n        var $btnSubmit = $('#btn_payment_submit');\n        var errors = [];\n\n        $btnSubmit.prop('disabled', 'disabled');\n\n        $('#amount').on('blur', function(){\n            affiniForm.formatAmount($(this));\n        });\n\n        var monthExpiration = $('#exp_month');\n        var yearExpiration = $('#exp_year');\n        monthExpiration.on('change', validateExpiration);\n        yearExpiration.on('change', validateExpiration);\n\n        function validateExpiration(){\n            var field = $('.affinipay-exp_year label');\n            var errorField = $('.affinipay-exp_year span');\n            var theDate = new Date(monthExpiration.val()+'/1/'+ yearExpiration.val());\n            var isValidDate = theDate > new Date();\n            field.toggleClass('affinipay_error', !isValidDate);\n            errorField.toggleClass('affinipay_error', !isValidDate).html(!isValidDate ? 'Card is expired' : '');\n            isErrored('exp_year', !isValidDate);\n        }\n\n        this.find('input').each(function () {\n            $(this)\n                .on('change', PaymentFormChangeHandler)\n                .on('keyup', PaymentFormKeyPressHandler)\n                .on('keydown', checkMaxLength)\n                .on('focus', PaymentFormFocusHandler)\n                .on('blur', PaymentFormBlurHandler);\n        });\n\n        function PaymentFormFocusHandler(e) {\n            e.preventDefault();\n        }\n\n        function PaymentFormKeyPressHandler(e) {\n            var target = $(e.currentTarget);\n            if (target.attr('id') == 'number') setCardValidationRule(e);\n            if (target.hasClass('affinipay_error')) {\n                PaymentFormBlurHandler(e);\n            }\n        }\n\n\n        function checkMaxLength(e){\n            if(e.key.length > 1) return;\n\n            var target = $(e.currentTarget);\n            var el = $('.affinipay-' + target.attr('id') + ' span');\n            if (target.attr('maxlength') != target.val().length) {\n                el.removeClass('warning');\n                return;\n            }\n\n            el.addClass('warning').html('Length may not exceed ' + target.attr('maxlength') + ' characters.');\n        }\n\n        function PaymentFormBlurHandler(e) {\n            var val = $(e.currentTarget).val(),\n                rule_type = $(e.currentTarget).data('validate'),\n                rule = null,\n                isValid = true,\n                container = '.affinipay-' + $(e.currentTarget).attr('id'),\n                v = {\n                    field: e.currentTarget,\n                    error_label: container + ' span',\n                    rule_type: rule_type,\n                    required: $(e.currentTarget).attr('required'),\n                    value: val\n            };\n\n\n            if(rule_type === 'cc'){\n                setCardTypeFromNumber(e);\n                isValid = affiniForm.isValidCard(val);\n            }\n            else if (typeof(rule_type) !== 'undefined') {\n                rule = validation_tests[rule_type];\n                isValid = validForRule(val.trim(), rule);\n            }\n\n            if(!v.required && val.trim() === '') {\n                isValid = true;\n            }\n\n            if (isValid === true) {\n                var textLabel = v.error_label.replace('span', 'label');\n                $(e.currentTarget).removeClass('affinipay_error');\n                $(v.error_label).removeClass('affinipay_error').html('');\n                $(textLabel).removeClass('affinipay_error');\n\n                var c = $(e.currentTarget).attr('id');\n                isErrored(c, false);\n            } else {\n                handleValidationError(v);\n            }\n        }\n\n        function PaymentFormChangeHandler(e) {\n            e.preventDefault();\n        }\n\n        function setCardValidationRule(e) {\n            var cardTypeFromNumber = setCardTypeFromNumber(e);\n            if (cardTypeFromNumber != null) {\n                return cardTypeFromNumber.patterns;\n            } else {\n                return new RegExp(/\\*/);\n            }\n        }\n\n        function setCardTypeFromNumber(e) {\n            var brand = null,\n                val = $card_number.val();\n            if (val !== '') {\n                if (card_types.visa.patterns.test(val)) brand = 'visa';\n                if (card_types.mastercard.patterns.test(val)) brand = 'mastercard';\n                if (card_types.discover.patterns.test(val)) brand = 'discover';\n                if (card_types.amex.patterns.test(val)) brand = 'amex';\n                if (card_types.jcb.patterns.test(val)) brand = 'jcb';\n            }\n            return setCardBrand(brand, e);\n        }\n\n        function setCardBrand(t, e) {\n            card_brand = card_types[t];\n            $card_number.removeClass('visa mastercard amex discover');\n            $card_number.addClass(t);\n            formatCardNumber(e);\n            return card_brand;\n        }\n\n        function formatCardNumber(e) {\n            if (e.keyCode === 8 || card_brand == null) {\n                return;\n            }\n\n            var formatted = '',\n                raw_string = $card_number.val(),\n                matches = raw_string.replace(/\\D/g, '').match(card_brand.format);\n\n            if (!matches) {\n                return;\n            }\n\n            for(var x = 1; x < 5; x++){\n                formatted += (typeof(matches[x]) !== 'undefined' ? matches[x].replace(/$/, ' ') : '');\n            }\n\n            $card_number.val(formatted);\n        }\n\n        function validForRule(str, regex) {\n\n            var isValid = false;\n\n            if (regex != null && str != null) {\n                isValid = regex.test(str);\n            }\n            if (regex == null) {\n                isValid = true;\n            }\n            return isValid;\n        }\n\n        function handleValidationError(data) {\n            if (data.value.trim() === '') {\n                displayError(data, 'Cannot be blank');\n                return;\n            }\n\n            var message;\n\n            switch (data.rule_type) {\n                case 'email':\n                    message = 'Please enter a valid Email Address';\n                    break;\n                case 'numeric':\n                    message = 'Must contain only numbers';\n                    break;\n                case 'alpha':\n                    message = 'Must contain only letters';\n                    break;\n                case 'alphanumeric':\n                    message = 'Must contain only letters and numbers';\n                    break;\n                case 'month':\n                    message = data.value.length !== 2 ? 'Must be in MM format' : 'Must be a number';\n                    break;\n                case 'year':\n                    message = data.value.length !== 4 ? 'Must be in YYYY format' : 'Must be a number';\n                    break;\n                case 'postal_code':\n                    message = data.value.length < 3 ? 'Length must be at least 3 characters' : 'Please enter a valid Postal Code';\n                    break;\n                case 'cvv':\n                    message = data.value.length < 3 ? 'Length must be at least 3 characters' : 'Please enter a valid CVV.';\n                    break;\n                case 'phone':\n                    message = 'Must be a number';\n                    break;\n                case 'cc':\n                    message = 'Please enter a valid Card Number.';\n                    break;\n                default:\n                    $(data.error_label).removeClass('affinipay_error').html('');\n                    return;\n            }\n\n\n            displayError(data, message);\n        }\n\n        function displayError(data, message) {\n            data.txt = data.error_label.replace('span', 'label');\n            $(data.field).addClass('affinipay_error');\n            $(data.error_label).addClass('affinipay_error').html(message);\n            $(data.txt).addClass('affinipay_error');\n\n            var c = $(data.field).attr('id');\n            isErrored(c, true);\n        }\n\n        function isErrored(id, inError){\n            var index = errors.indexOf(id);\n            if(inError){\n                if (index < 0) {\n                    errors.push(id);\n                }\n            } else {\n                if (index > -1) {\n                    errors.splice(index, 1);\n                }\n            }\n\n            $btnSubmit.prop('disabled', errors.length > 0);\n        }\n\n        affiniForm.validateAllFields = function(){\n            validateExpiration();\n            form.find('input').each(function(){\n               PaymentFormBlurHandler({currentTarget: this});\n            });\n\n            return errors.length === 0;\n        }\n    };\n}( jQuery ));\n","(function( $ ) {\n    ChargeIO.init({ public_key: affinipay.public_key });\n    ChargeIO.ready(function() {\n\n        // Cache Selector Objects\n        var form = $('#frm_affinipay_payment'),\n            btnSubmit = $('#btn_payment_submit'),\n            amount = $('#amount'),\n            account = $('#frm_affinipay_payment #account'),\n            reference = $('#reference'),\n            number = $('#number'),\n            exp_month = $('#exp_month'),\n            exp_year = $('#exp_year'),\n            cvv = $('#cvv'),\n            name = $('#name'),\n            address1 = $('#address1'),\n            address2 = $('#address2'),\n            city = $('#city'),\n            state = $('#state'),\n            postal_code = $('#postal_code'),\n            email = $('#email'),\n            account = $(\"#account\"),\n            phone = $('#phone'),\n            recurring_interval = $('#recurring_interval'),\n            recurring_ends = $('#recurring_ends'),\n            extendChargeIO = function(charge_params){\n                if (typeof(name) !== 'undefined') charge_params.customer_name = name.val();\n                if (typeof(address1) !== 'undefined') charge_params.customer_address = address1.val();\n                if (typeof(address2) !== 'undefined') charge_params.customer_address2 = address2.val();\n                if (typeof(city) !== 'undefined') charge_params.customer_city = city.val();\n                if (typeof(state) !== 'undefined') charge_params.customer_state = state.val();\n                if (typeof(postal_code) !== 'undefined') charge_params.customer_postal = postal_code.val();\n                if (typeof(email) !== 'undefined') charge_params.customer_email = email.val();\n                if (typeof(phone) !== 'undefined') charge_params.customer_phone = phone.val();\n                if (typeof(recurring_interval) !== 'undefined') charge_params.recurring_interval = recurring_interval.val();\n                if (typeof(recurring_ends) !== 'undefined') charge_params.recurring_ends = recurring_ends.val();\n                return charge_params;\n            },\n            formComplete = function(data){\n                var emailSent = data.method.email ? \"<span>An email has been sent to \" + data.method.email + \"</span>\" : '';\n                form.fadeOut(100, function(){ $(this).replaceWith(\"<h2>Payment Successful</h2>\" + emailSent) });\n            },\n            onSubmit = function(e){\n                e.preventDefault();\n                if(!affiniForm.validateAllFields()) return;\n                $(e.currentTarget).prop(\"disabled\", true);\n                affiniForm.formatAmount(amount);\n                var paymentJson = ChargeIO.payment_params(form);\n                paymentJson.amount = parseInt(amount.val().replace(/\\D/g,''));\n                ChargeIO.create_token(paymentJson, function(token) {\n                    var charge_params = {\n                        action: 'affinipay_submit_charge',\n                        amount: token.form_data.amount,\n                        token: token.id,\n                        redirect_url: affinipay.redirect_url,\n                        account_id: account.val()\n                    };\n\n                    extendChargeIO(charge_params);\n                    removeNameAttributes();\n\n                    $.post(affinipay.ajax_url, charge_params)\n                        .done(function(data) {\n                            if(charge_params.redirect_url){\n                                window.location = charge_params.redirect_url + '&payment=' + data.id;\n                                return;\n                            }\n\n                            formComplete(data);\n                        })\n                        .fail(function(resp) {\n                            var data = resp.responseJSON || { \"messages\": [ { message: \"An unexpected error occurred\" }] };\n                            processErrorMessages(data);\n                        })\n                        .always(function(){\n                            btnSubmit.attr('disabled', false);\n                        });\n                });\n            };\n\n        // Prevent the Form from submitting to the server\n        form.on('submit', function(e) {\n            e.preventDefault();\n            return false;\n        });\n\n        btnSubmit.click(onSubmit);\n\n        function processErrorMessages(err) {\n\n            addNameAttributes();\n\n            var formWrapper = $('.affinipay_payment_form'),\n                form = $('#frm_affinipay_payment'),\n                ap_error = $('#affinipay_error_message');\n\n            if (ap_error.length) ap_error.html('').css('display', 'none');\n\n            var err_message = '';\n\n            err.messages.forEach(function(error) {\n                err_message += error.message +'<br/>';\n                updateFields(error);\n            });\n\n            var msg = '<div id=\"affinipay_error_message\" class=\"affinipay_error_label alert alert-danger\">'+err_message +'</div>';\n\n            if (ap_error.length) {\n                ap_error.html(err_message).css('display', 'block').addClass('alert alert-danger').fadeOut(100).fadeIn(100);\n            } else {\n                formWrapper.before(msg);\n            }\n\n\n            $('html, body').animate({\n                scrollTop: $(formWrapper).offset().top - 120\n            }, 300);\n        }\n    });\n\n    function removeNameAttributes() {\n        number.removeAttribute('name');\n        exp_month.removeAttribute('name');\n        exp_year.removeAttribute('name');\n        cvv.removeAttribute('name');\n    }\n\n    function addNameAttributes() {\n        number.name = 'number';\n        exp_month.name = 'exp_month';\n        exp_year.name = 'exp_year';\n        cvv.name = 'cvv';\n    }\n\n    function updateFields(data) {\n        if (data.code == 'card_number_invalid') applyToField(number, data.message);\n        if (data.code == 'invalid_data') {\n            if (data.context == 'method.number') applyToField(number, data.message);\n            if (data.context == 'method.exp_month') applyToField(exp_month, data.message);\n            if (data.context == 'method.exp_year')  applyToField(exp_year, data.message);\n            if (data.context == 'method.cvv') applyToField(cvv, data.message);\n        }\n    }\n\n    function applyToField(el, msg) {\n\n        var sel = '#'+ $(el).attr('id') +' label span';\n        var lbl = '#'+ $(el).attr('id') +' label';\n\n        $(el).addClass('affinipay_error');\n        $(lbl).addClass('affinipay_error');\n\n        $(sel)\n            .addClass('affinipay_error')\n            .css('display', 'block')\n            .html(msg);\n    }\n\n})(jQuery);\n\n\n"]}